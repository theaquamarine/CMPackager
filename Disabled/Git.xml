<ApplicationDef>
	<Application>
		<Name>Git</Name>
		<Description>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. Free and Open Source Software</Description>
		<Publisher>Software Freedom Conservancy</Publisher>
		<AutoInstall>True</AutoInstall>
		<UserDocumentation>https://git-scm.com/</UserDocumentation>
		<Icon>Git.ico</Icon>
	</Application>
	<Downloads>
		<Download DeploymentType="DeploymentType1">
			<PrefetchScript>$URL = (((Invoke-WebRequest https://git-scm.com/download/win).Links) | where -Property OuterText -EQ "64-bit Git for Windows Setup").href
			$Download.Version = if ($URL -replace '\.windows' -match "\d+\.\d+\.\d+(\.\d+)?") {$matches[0]}
			[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
			write-output $URL</PrefetchScript>
			<URL></URL>
			<DownloadFileName>Git-x64.exe</DownloadFileName>
			<Version></Version>
			<FullVersion></FullVersion>
			<DownloadVersionCheck>$Version = ((Get-item $TempDir\$DownloadFileName).VersionInfo.FileVersion).TrimStart().TrimEnd()</DownloadVersionCheck>
			<AppRepoFolder>x64</AppRepoFolder>
			<ExtraCopyFunctions>if (Test-Path $ScriptRoot\ExtraFiles\git.inf) {Copy-Item -Path $ScriptRoot\ExtraFiles\git.inf -Destination $DestinationPath}</ExtraCopyFunctions>
		</Download>
		<Download DeploymentType="DeploymentType2">
			<PrefetchScript>$URL = (((Invoke-WebRequest https://git-scm.com/download/win).Links) | where -Property OuterText -EQ "32-bit Git for Windows Setup").href
			$Download.Version = if ($URL -replace '\.windows' -match "\d+\.\d+\.\d+(\.\d+)?") {$matches[0]}
			</PrefetchScript>
			<URL></URL>
			<DownloadFileName>Git-x86.exe</DownloadFileName>
			<Version></Version>
			<FullVersion></FullVersion>
			<DownloadVersionCheck>$Version = ((Get-item $TempDir\$DownloadFileName).VersionInfo.FileVersion).TrimStart().TrimEnd()</DownloadVersionCheck>
			<AppRepoFolder>x86</AppRepoFolder>
			<ExtraCopyFunctions>if (Test-Path $ScriptRoot\ExtraFiles\git.inf) {Copy-Item -Path $ScriptRoot\ExtraFiles\git.inf -Destination $DestinationPath}</ExtraCopyFunctions>
		</Download>
	</Downloads>
	<DeploymentTypes>
		<DeploymentType Name="DeploymentType1">
			<DeploymentTypeName>Git x64</DeploymentTypeName>
			<InstallationType>Script</InstallationType>
			<CacheContent>False</CacheContent>
			<BranchCache>True</BranchCache>
			<ContentFallback>True</ContentFallback>
			<OnSlowNetwork>Download</OnSlowNetwork>
			<InstallProgram>Git-x64.exe /VERYSILENT /NORESTART /LOADINF="git.inf"</InstallProgram>
			<UninstallCmd>`"%ProgramFiles%\Git\unins000.exe`" /VERYSILENT</UninstallCmd>
			<InstallationBehaviorType>InstallForSystem</InstallationBehaviorType>
			<LogonReqType>WhetherOrNotUserLoggedOn</LogonReqType>
			<UserInteractionMode>Hidden</UserInteractionMode>
			<EstRuntimeMins>10</EstRuntimeMins>
			<MaxRuntimeMins>30</MaxRuntimeMins>
			<RebootBehavior>BasedOnExitCode</RebootBehavior>
			<DetectionMethodType>Custom</DetectionMethodType>
			<CustomDetectionMethods>
				<DetectionClause>
					<DetectionClauseType>File</DetectionClauseType>
					<Name>git-cmd.exe</Name>
					<Path>%ProgramFiles%\Git\</Path>
					<PropertyType>Version</PropertyType>
					<ExpectedValue>$Version</ExpectedValue>
					<ExpressionOperator>GreaterEquals</ExpressionOperator>
					<Value>True</Value>
				</DetectionClause>
			</CustomDetectionMethods>
			<RequirementsRules>
				<RequirementsRule>
					<RequirementsRuleType>Existential</RequirementsRuleType>
					<RequirementsRuleValue>
						<RuleValue>True</RuleValue>
					</RequirementsRuleValue>
					<RequirementsRuleGlobalCondition>AutoPackage - OSArchitecture x64</RequirementsRuleGlobalCondition>
				</RequirementsRule>
			</RequirementsRules>
		</DeploymentType>
		<DeploymentType Name="DeploymentType2">
			<DeploymentTypeName>Git x86</DeploymentTypeName>
			<InstallationType>Script</InstallationType>
			<CacheContent>False</CacheContent>
			<BranchCache>True</BranchCache>
			<ContentFallback>True</ContentFallback>
			<OnSlowNetwork>Download</OnSlowNetwork>
			<InstallProgram>Git-x86.exe /VERYSILENT /NORESTART /LOADINF="git.inf"</InstallProgram>
			<UninstallCmd>`"%ProgramFiles(x86)%\Git\unins000.exe`" /VERYSILENT</UninstallCmd>
			<InstallationBehaviorType>InstallForSystem</InstallationBehaviorType>
			<LogonReqType>WhetherOrNotUserLoggedOn</LogonReqType>
			<UserInteractionMode>Hidden</UserInteractionMode>
			<EstRuntimeMins>10</EstRuntimeMins>
			<MaxRuntimeMins>30</MaxRuntimeMins>
			<RebootBehavior>BasedOnExitCode</RebootBehavior>
			<DetectionMethodType>Custom</DetectionMethodType>
			<CustomDetectionMethods>
				<DetectionClause>
					<DetectionClauseType>File</DetectionClauseType>
					<Name>git-cmd.exe</Name>
					<Path>%ProgramFiles(x86)%\Git\</Path>
					<PropertyType>Version</PropertyType>
					<ExpectedValue>$Version</ExpectedValue>
					<ExpressionOperator>GreaterEquals</ExpressionOperator>
					<Value>True</Value>
				</DetectionClause>
			</CustomDetectionMethods>
		</DeploymentType>
	</DeploymentTypes>
	<Distribution>
		<DistributeContent>True</DistributeContent>
	</Distribution>
	<Deployment>
		<DeploySoftware>True</DeploySoftware>
	</Deployment>
</ApplicationDef>
